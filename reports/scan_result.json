{
    "vulnerabilities": [
        {
            "severity": "High",
            "type": "SQL Injection",
            "vulnerableFunction": "executeQuery",
            "lineNumber": 2,
            "description": "The function directly interpolates user input into an SQL query without any sanitization or parameterization, making it vulnerable to SQL injection attacks.",
            "suggestion": "Use parameterized queries or prepared statements to safely include user input in SQL queries. For example, use a library that supports parameterized queries:\n\n```typescript\nfunction executeQuery(query: string) {\n  const sql = 'SELECT * FROM users WHERE id = ?';\n  database.execute(sql, [query]);\n}\n```",
            "confidence": 0.9
        },
        {
            "severity": "High",
            "type": "Cross-site Scripting (XSS)",
            "vulnerableFunction": "displayUserInput",
            "lineNumber": 6,
            "description": "The function sets `innerHTML` with user input directly, which can lead to XSS if the input is not properly sanitized.",
            "suggestion": "Escape or sanitize user input before setting it as HTML content. Use a library like DOMPurify to sanitize HTML:\n\n```typescript\nfunction displayUserInput(input: string) {\n  const element = document.createElement(\"div\");\n  element.textContent = input; // Use textContent to avoid HTML parsing\n  document.body.appendChild(element);\n}\n```",
            "confidence": 0.9
        },
        {
            "severity": "High",
            "type": "Command Injection",
            "vulnerableFunction": "processCommand",
            "lineNumber": 11,
            "description": "The function uses `exec` to run shell commands with user input, which can lead to command injection if the input is not properly validated.",
            "suggestion": "Avoid using `exec` with user input. If necessary, validate and sanitize the input thoroughly. Consider using `execFile` for safer command execution:\n\n```typescript\nfunction processCommand(cmd: string) {\n  const execFile = require(\"child_process\").execFile;\n  execFile(cmd, (error: any, stdout: any) => {\n    console.log(stdout);\n  });\n}\n```",
            "confidence": 0.9
        },
        {
            "severity": "Medium",
            "type": "Cryptographic Failures",
            "vulnerableFunction": "storePassword",
            "lineNumber": 17,
            "description": "The function uses MD5 for hashing passwords, which is considered insecure due to its vulnerability to collision attacks.",
            "suggestion": "Use a stronger hashing algorithm like bcrypt, which is specifically designed for securely hashing passwords:\n\n```typescript\nconst bcrypt = require('bcrypt');\nfunction storePassword(password: string) {\n  const saltRounds = 10;\n  return bcrypt.hashSync(password, saltRounds);\n}\n```",
            "confidence": 0.8
        },
        {
            "severity": "Medium",
            "type": "Race Condition",
            "vulnerableFunction": "withdrawMoney",
            "lineNumber": 27,
            "description": "The function checks and updates the balance asynchronously, which can lead to race conditions if multiple withdrawals are processed simultaneously.",
            "suggestion": "Use a locking mechanism or atomic operations to ensure that balance updates are performed safely:\n\n```typescript\nlet balance = 100;\nasync function withdrawMoney(amount: number) {\n  await lock.acquire();\n  try {\n    if (balance >= amount) {\n      balance -= amount;\n      return amount;\n    }\n    return 0;\n  } finally {\n    lock.release();\n  }\n}\n```",
            "confidence": 0.7
        }
    ]
}
