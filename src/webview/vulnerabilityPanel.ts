import * as vscode from 'vscode';
import { VulnerabilityResult } from '../scanner';
import * as fs from 'fs';
import * as path from 'path';
import PDFDocument from 'pdfkit';

export class VulnerabilityPanel {
    private static currentPanel: VulnerabilityPanel | undefined;
    private readonly _panel: vscode.WebviewPanel;
    private _disposables: vscode.Disposable[] = [];

    constructor(private readonly extensionUri: vscode.Uri) {
        this._panel = vscode.window.createWebviewPanel(
            'vulnerabilityReport',
            'Security Scan Results',
            vscode.ViewColumn.Two,
            {
                enableScripts: true,
                retainContextWhenHidden: true,
                localResourceRoots: [
                    vscode.Uri.parse(extensionUri.toString() + '/media')
                ]
            }
        );

        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);
    }

    public static createOrShow(extensionUri: vscode.Uri): VulnerabilityPanel {
        if (VulnerabilityPanel.currentPanel) {
            VulnerabilityPanel.currentPanel._panel.reveal(vscode.ViewColumn.Two);
            return VulnerabilityPanel.currentPanel;
        }

        VulnerabilityPanel.currentPanel = new VulnerabilityPanel(extensionUri);
        return VulnerabilityPanel.currentPanel;
    }

    public async show(vulnerabilities: VulnerabilityResult[], fileName?: string, provider?: string) {
        if (!fileName) {
            return;
        }

        // Get the current provider if not provided
        if (!provider) {
            provider = "AI";
        }

        // Split vulnerabilities based on confidence score
        const validatedVulns = vulnerabilities.filter(v => v.confidence >= 0.5);
        const unconfirmedVulns = vulnerabilities.filter(v => v.confidence < 0.5);

        // Generate reports for validated vulnerabilities
        if (validatedVulns.length > 0) {
            await this.generateReports(validatedVulns, fileName, '_validated', provider);
        }

        // Generate reports for unconfirmed vulnerabilities
        if (unconfirmedVulns.length > 0) {
            await this.generateReports(unconfirmedVulns, fileName, '_NotConfirmed', provider);
        }

        // Show all vulnerabilities in the webview, categorized by confidence
        const htmlContent = this.getWebviewContentWithSections(validatedVulns, unconfirmedVulns, provider);
        
        this._panel.webview.html = htmlContent;
        this._panel.reveal(vscode.ViewColumn.Two);
    }
    
    private getWebviewContentWithSections(validatedVulns: VulnerabilityResult[], unconfirmedVulns: VulnerabilityResult[], provider?: string): string {
        // Generate validated vulnerabilities section
        let sectionsHtml = '';
        
        if (validatedVulns.length > 0) {
            const validatedHtml = validatedVulns.map(v => this.generateVulnerabilityHtml(v)).join('');
            sectionsHtml += `
                <div class="results-section">
                    <h2>Validated Vulnerabilities (Confidence â‰¥ 50%)</h2>
                    ${validatedHtml}
                </div>
            `;
        }
        
        // Generate unconfirmed vulnerabilities section
        if (unconfirmedVulns.length > 0) {
            const unconfirmedHtml = unconfirmedVulns.map(v => this.generateVulnerabilityHtml(v)).join('');
            sectionsHtml += `
                <div class="results-section">
                    <h2>Unconfirmed Vulnerabilities (Confidence < 50%)</h2>
                    <div class="unconfirmed-notice">
                        These vulnerabilities have lower confidence scores and may require further investigation.
                    </div>
                    ${unconfirmedHtml}
                </div>
            `;
        }
        
        // If no vulnerabilities found
        if (validatedVulns.length === 0 && unconfirmedVulns.length === 0) {
            sectionsHtml = `
                <div class="no-vulnerabilities">
                    <h2>No vulnerabilities detected</h2>
                    <p>The security scan did not find any vulnerabilities in the analyzed code.</p>
                </div>
            `;
        }
        
        return `<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Security Scan Results</title>
                <style>
                    /* Styles for vulnerability display */
                    .vulnerability-item {
                        background-color: var(--vscode-editor-background);
                        padding: 15px;
                        border-radius: 4px;
                        border-left-width: 4px;
                        border-left-style: solid;
                        margin-bottom: 15px;
                    }

                    .vulnerability-item.high {
                        border-left-color: var(--high-severity);
                    }

                    .vulnerability-item.medium {
                        border-left-color: var(--medium-severity);
                    }

                    .vulnerability-item.low {
                        border-left-color: var(--low-severity);
                    }

                    /* Code snippet styling */
                    .code-snippet {
                        background-color: var(--vscode-editor-background);
                        padding: 10px;
                        border-radius: 4px;
                        overflow-x: auto;
                        margin: 8px 0;
                        font-family: 'Consolas', 'Monaco', monospace;
                    }

                    /* Title and badge styling */
                    .severity-badge {
                        font-size: 12px;
                        padding: 2px 8px;
                        border-radius: 12px;
                        font-weight: normal;
                        margin-right: 10px;
                    }

                    .severity-badge.high {
                        background-color: #dc3545;
                        color: white;
                    }

                    .severity-badge.medium {
                        background-color: #ffc107;
                        color: black;
                    }

                    .severity-badge.low {
                        background-color: #28a745;
                        color: white;
                    }

                    .title {
                        font-size: 16px;
                        flex: 1;
                    }

                    h3 {
                        display: flex;
                        align-items: center;
                        gap: 10px;
                        margin-top: 0;
                        margin-bottom: 15px;
                    }

                    /* Line number reference styling */
                    .line-ref {
                        font-family: 'Consolas', 'Monaco', monospace;
                        padding: 2px 6px;
                        background-color: var(--vscode-input-background);
                        border-radius: 3px;
                        display: inline-block;
                    }

                    /* Details grid styling */
                    .details-grid {
                        display: grid;
                        gap: 15px;
                    }

                    .detail-item {
                        padding: 10px;
                        background-color: var(--vscode-input-background);
                        border-radius: 4px;
                    }

                    .detail-label {
                        font-size: 12px;
                        text-transform: uppercase;
                        color: var(--vscode-descriptionForeground);
                        display: block;
                        margin-bottom: 5px;
                    }

                    /* Confidence bar styling */
                    .confidence-bar {
                        height: 20px;
                        background-color: var(--vscode-editor-background);
                        border-radius: 10px;
                        overflow: hidden;
                        position: relative;
                    }

                    .confidence-fill {
                        height: 100%;
                        background-color: #4a9eff;
                        transition: width 0.3s ease;
                    }

                    .confidence-text {
                        position: absolute;
                        right: 8px;
                        top: 50%;
                        transform: translateY(-50%);
                        font-size: 12px;
                        color: white;
                    }

                    /* Suggestion block styling */
                    .suggestion-block {
                        background-color: var(--vscode-editor-background);
                        border-left: 4px solid #4a9eff;
                        padding: 10px;
                        border-radius: 0 4px 4px 0;
                    }
                    
                    /* Section styling */
                    .results-section {
                        margin-bottom: 30px;
                    }
                    
                    .results-section h2 {
                        margin-bottom: 15px;
                        padding-bottom: 8px;
                        border-bottom: 1px solid var(--vscode-textSeparator-foreground);
                    }
                    
                    .unconfirmed-notice {
                        background-color: var(--vscode-inputValidation-infoBackground);
                        color: var(--vscode-inputValidation-infoForeground);
                        padding: 10px;
                        border-radius: 4px;
                        margin-bottom: 15px;
                        font-style: italic;
                    }
                    
                    .no-vulnerabilities {
                        padding: 20px;
                        text-align: center;
                        background-color: var(--vscode-editor-background);
                        border-radius: 4px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Security Scan Results ${provider ? `(Provider: ${provider})` : ''}</h1>
                    ${sectionsHtml}
                </div>
            </body>
            </html>`;
    }
    
    private generateVulnerabilityHtml(v: VulnerabilityResult): string {
        return `
            <div class="vulnerability-item ${v.severity.toLowerCase()}">
                <h3>
                    <span class="severity-badge ${v.severity.toLowerCase()}">${v.severity} Severity</span>
                    <span class="title">${this.escapeHtml(v.type || '')} Vulnerability: ${this.escapeHtml(v.vulnerableFunction || '')}</span>
                </h3>
                <div class="details-grid">
                    <div class="detail-item">
                        <span class="detail-label">Description</span>
                        <div class="description">${this.escapeHtml(v.description)}</div>
                    </div>

                    <div class="detail-item line-number">
                        <span class="detail-label">Line Number</span>
                        <div class="line-ref">${v.lineNumber}</div>
                    </div>

                    <div class="detail-item">
                        <span class="detail-label">Vulnerable Code</span>
                        <pre class="code-snippet"><code>${this.escapeHtml(v.codeSnippet || '')}</code></pre>
                    </div>

                    <div class="detail-item">
                        <span class="detail-label">Possible Remediation</span>
                        <div class="suggestion suggestion-block">
                            <div class="suggestion-content">${this.escapeHtml(v.suggestion)}</div>
                        </div>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Confidence Score</span>
                        <div class="confidence-bar">
                            <div class="confidence-fill" style="width: ${v.confidence * 100}%"></div>
                            <span class="confidence-text">${(v.confidence * 100).toFixed(1)}%</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    private getWebviewContent(vulnerabilities: VulnerabilityResult[]): string {
        const vulnerabilitiesHtml = vulnerabilities.map(v => `
            <div class="vulnerability-item ${v.severity.toLowerCase()}">
                <h3>
                    <span class="severity-badge ${v.severity.toLowerCase()}">${v.severity} Severity</span>
                    <span class="title">${this.escapeHtml(v.type || '')} Vulnerability: ${this.escapeHtml(v.vulnerableFunction || '')}</span>
                </h3>
                <div class="details-grid">
                    <div class="detail-item">
                        <span class="detail-label">Description</span>
                        <div class="description">${this.escapeHtml(v.description)}</div>
                    </div>

                    <div class="detail-item line-number">
                        <span class="detail-label">Line Number</span>
                        <div class="line-ref">${v.lineNumber}</div>
                    </div>


                    <div class="detail-item">
                        <span class="detail-label">Vulnerable Code</span>
                        <pre class="code-snippet"><code>${this.escapeHtml(v.codeSnippet || '')}</code></pre>
                    </div>

                    <div class="detail-item">
                        <span class="detail-label">Possible Remediation</span>
                        <div class="suggestion suggestion-block">
                            <div class="suggestion-content">${this.escapeHtml(v.suggestion)}</div>
                        </div>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Confidence Score</span>
                        <div class="confidence-bar">
                            <div class="confidence-fill" style="width: ${v.confidence * 100}%"></div>
                            <span class="confidence-text">${(v.confidence * 100).toFixed(1)}%</span>
                        </div>
                    </div>
                </div>
            </div>
        `).join('');

        return `<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Security Scan Results</title>
                <style>
                    /* Styles for vulnerability display */
                    .vulnerability-item {
                        background-color: var(--vscode-editor-background);
                        padding: 15px;
                        border-radius: 4px;
                        border-left-width: 4px;
                        border-left-style: solid;
                        margin-bottom: 15px;
                    }

                    .vulnerability-item.high {
                        border-left-color: var(--high-severity);
                    }

                    .vulnerability-item.medium {
                        border-left-color: var(--medium-severity);
                    }

                    .vulnerability-item.low {
                        border-left-color: var(--low-severity);
                    }

                    /* Code snippet styling */
                    .code-snippet {
                        background-color: var(--vscode-editor-background);
                        padding: 10px;
                        border-radius: 4px;
                        overflow-x: auto;
                        margin: 8px 0;
                        font-family: 'Consolas', 'Monaco', monospace;
                    }

                    /* Title and badge styling */
                    .severity-badge {
                        font-size: 12px;
                        padding: 2px 8px;
                        border-radius: 12px;
                        font-weight: normal;
                        margin-right: 10px;
                    }

                    .severity-badge.high {
                        background-color: #dc3545;
                        color: white;
                    }

                    .severity-badge.medium {
                        background-color: #ffc107;
                        color: black;
                    }

                    .severity-badge.low {
                        background-color: #28a745;
                        color: white;
                    }

                    .title {
                        font-size: 16px;
                        flex: 1;
                    }

                    h3 {
                        display: flex;
                        align-items: center;
                        gap: 10px;
                        margin-top: 0;
                        margin-bottom: 15px;
                    }

                    /* Line number reference styling */
                    .line-ref {
                        font-family: 'Consolas', 'Monaco', monospace;
                        padding: 2px 6px;
                        background-color: var(--vscode-input-background);
                        border-radius: 3px;
                        display: inline-block;
                    }

                    /* Details grid styling */
                    .details-grid {
                        display: grid;
                        gap: 15px;
                    }

                    .detail-item {
                        padding: 10px;
                        background-color: var(--vscode-input-background);
                        border-radius: 4px;
                    }

                    .detail-label {
                        font-size: 12px;
                        text-transform: uppercase;
                        color: var(--vscode-descriptionForeground);
                        display: block;
                        margin-bottom: 5px;
                    }

                    /* Confidence bar styling */
                    .confidence-bar {
                        height: 20px;
                        background-color: var(--vscode-editor-background);
                        border-radius: 10px;
                        overflow: hidden;
                        position: relative;
                    }

                    .confidence-fill {
                        height: 100%;
                        background-color: #4a9eff;
                        transition: width 0.3s ease;
                    }

                    .confidence-text {
                        position: absolute;
                        right: 8px;
                        top: 50%;
                        transform: translateY(-50%);
                        font-size: 12px;
                        color: white;
                    }

                    /* Suggestion block styling */
                    .suggestion-block {
                        background-color: var(--vscode-editor-background);
                        border-left: 4px solid #4a9eff;
                        padding: 10px;
                        border-radius: 0 4px 4px 0;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h2>Security Scan Results</h2>
                    <p class="provider-info">Generated using AI-powered vulnerability scanning</p>
                    ${vulnerabilitiesHtml}
                </div>
            </body>
            </html>`;
    }

    private escapeHtml(unsafe: string): string {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    private async generateReports(vulnerabilities: VulnerabilityResult[], fileName: string, suffix: string, provider?: string): Promise<void> {
        const basePath = vscode.workspace.rootPath || '';
        const baseName = path.parse(fileName).name;
        const savedFiles: string[] = [];

        // Ask user for report format
        const formatOptions = ['HTML', 'PDF', 'Markdown', 'ALL'];
        const selectedFormat = await vscode.window.showQuickPick(formatOptions, {
            placeHolder: 'Select report format(s)',
            canPickMany: true
        }) || ['ALL'];

        const generateAll = selectedFormat.includes('ALL');

        // Generate HTML report
        if (generateAll || selectedFormat.includes('HTML')) {
            const htmlContent = this.getWebviewContent(vulnerabilities);
            const htmlPath = path.join(basePath, `${baseName}${suffix}.html`);
            fs.writeFileSync(htmlPath, htmlContent);
            savedFiles.push(path.basename(htmlPath));
        }

        // Generate Markdown report
        if (generateAll || selectedFormat.includes('Markdown')) {
            const markdownContent = this.generateMarkdownReport(vulnerabilities, provider);
            const mdPath = path.join(basePath, `${baseName}${suffix}.md`);
            fs.writeFileSync(mdPath, markdownContent);
            savedFiles.push(path.basename(mdPath));
        }

        // Generate PDF report
        if (generateAll || selectedFormat.includes('PDF')) {
            const pdfPath = path.join(basePath, `${baseName}${suffix}.pdf`);
            await this.generatePDFReport(vulnerabilities, pdfPath, provider);
            savedFiles.push(path.basename(pdfPath));
        }

        if (savedFiles.length > 0) {
            vscode.window.showInformationMessage(
                `Reports saved as:\n${savedFiles.join('\n')}`
            );
        }
    }

    private async generatePDFReport(vulnerabilities: VulnerabilityResult[], outputPath: string, provider?: string): Promise<void> {
        const doc = new PDFDocument();
        const stream = fs.createWriteStream(outputPath);
        doc.pipe(stream);

        // Split vulnerabilities based on confidence score
        const validatedVulns = vulnerabilities.filter(v => v.confidence >= 0.5);
        const unconfirmedVulns = vulnerabilities.filter(v => v.confidence < 0.5);

        // Add title
        doc.fontSize(24).text('Security Scan Results', { align: 'center' });
        doc.moveDown();
        
        // Add provider info
        doc.fontSize(10)
           .fillColor('#555555')
           .text(`Generated using AI-powered vulnerability scanning${provider ? ` with ${provider}` : ''}`, { align: 'center' });
        doc.moveDown();

        // If no vulnerabilities found
        if (vulnerabilities.length === 0) {
            doc.fontSize(14)
               .fillColor('#000000')
               .text('No vulnerabilities detected in the analyzed code.', { align: 'center' });
        } else {
            // Add validated vulnerabilities section
            if (validatedVulns.length > 0) {
                doc.fontSize(18)
                   .fillColor('#000000')
                   .text('Validated Vulnerabilities (Confidence â‰¥ 50%)', { underline: true });
                doc.moveDown();
                
                this.addVulnerabilitiesToPDF(doc, validatedVulns);
            }
            
            // Add unconfirmed vulnerabilities section
            if (unconfirmedVulns.length > 0) {
                // Add page break if we already added validated vulnerabilities
                if (validatedVulns.length > 0) {
                    doc.addPage();
                }
                
                doc.fontSize(18)
                   .fillColor('#000000')
                   .text('Unconfirmed Vulnerabilities (Confidence < 50%)', { underline: true });
                doc.moveDown();
                
                doc.fontSize(10)
                   .fillColor('#555555')
                   .text('These vulnerabilities have lower confidence scores and may require further investigation.');
                doc.moveDown();
                
                this.addVulnerabilitiesToPDF(doc, unconfirmedVulns);
            }
        }

        doc.end();
        await new Promise<void>((resolve) => stream.on('finish', resolve));
    }
    
    private addVulnerabilitiesToPDF(doc: PDFKit.PDFDocument, vulnerabilities: VulnerabilityResult[]): void {
        vulnerabilities.forEach((v, index) => {
            if (index > 0) doc.addPage();

            // Severity header
            doc.fontSize(16)
               .fillColor(v.severity === 'High' ? '#dc3545' :
                         v.severity === 'Medium' ? '#ffc107' : '#28a745')
               .text(`${v.severity} Severity Vulnerability`);
            doc.moveDown();

            // Vulnerability details
            doc.fontSize(14)
               .fillColor('#000000')
               .text(v.type || 'Security Vulnerability');
            doc.moveDown();

            if (v.vulnerableFunction) {
                doc.fontSize(12)
                   .text(`Function: ${v.vulnerableFunction}`);
                doc.moveDown();
            }

            // Description
            doc.fontSize(12)
               .text('Description:', { underline: true });
            doc.fontSize(10)
               .text(v.description);
            doc.moveDown();

            // Line number
            if (v.lineNumber) {
                doc.fontSize(12)
                   .text('Location:', { underline: true });
                doc.fontSize(10)
                   .text(`Line ${v.lineNumber}`);
                doc.moveDown();
            }

            // Code snippet
            if (v.codeSnippet) {
                doc.fontSize(12)
                   .text('Vulnerable Code:', { underline: true });
                doc.font('Courier')
                   .fontSize(9)
                   .text(v.codeSnippet);
                doc.font('Helvetica')
                   .moveDown();
            }

            // Remediation
            doc.fontSize(12)
               .text('Remediation Steps:', { underline: true });
            doc.fontSize(10)
               .text(v.suggestion);
            doc.moveDown();

            // Confidence score
            doc.fontSize(12)
               .text('Confidence Score:', { underline: true });
            doc.fontSize(10)
               .text(`${(v.confidence * 100).toFixed(1)}%`);
        });
    }

    private generateMarkdownReport(vulnerabilities: VulnerabilityResult[], provider?: string): string {
        // Split vulnerabilities based on confidence score
        const validatedVulns = vulnerabilities.filter(v => v.confidence >= 0.5);
        const unconfirmedVulns = vulnerabilities.filter(v => v.confidence < 0.5);
        
        let markdownContent = `# Security Scan Results\n\n`;
        markdownContent += `*Generated using AI-powered vulnerability scanning${provider ? ` with ${provider}` : ''}*\n\n`;
        
        // Add validated vulnerabilities section if any exist
        if (validatedVulns.length > 0) {
            markdownContent += `## Validated Vulnerabilities (Confidence â‰¥ 50%)\n\n`;
            markdownContent += validatedVulns.map(v => this.formatVulnerabilityMarkdown(v)).join('\n');
        }
        
        // Add unconfirmed vulnerabilities section if any exist
        if (unconfirmedVulns.length > 0) {
            markdownContent += `\n\n## Unconfirmed Vulnerabilities (Confidence < 50%)\n\n`;
            markdownContent += `These vulnerabilities have lower confidence scores and may require further investigation.\n\n`;
            markdownContent += unconfirmedVulns.map(v => this.formatVulnerabilityMarkdown(v)).join('\n');
        }
        
        // If no vulnerabilities found
        if (vulnerabilities.length === 0) {
            markdownContent += `No vulnerabilities detected in the analyzed code.`;
        }
        
        return markdownContent;
    }
    
    private formatVulnerabilityMarkdown(v: VulnerabilityResult): string {
        return `
### ${v.type || 'Security'} Vulnerability
**Severity:** ${v.severity}
**Confidence:** ${(v.confidence * 100).toFixed(1)}%
${v.vulnerableFunction ? `**Function:** \`${v.vulnerableFunction}\`` : ''}
${v.lineNumber ? `**Line:** ${v.lineNumber}` : ''}

#### Description
${v.description}

${v.codeSnippet ? `#### Vulnerable Code
\`\`\`
${v.codeSnippet}
\`\`\`
` : ''}

#### Remediation Steps
${v.suggestion}

---`;
    }

    private dispose() {
        VulnerabilityPanel.currentPanel = undefined;
        this._panel.dispose();
        while (this._disposables.length) {
            const disposable = this._disposables.pop();
            if (disposable) {
                disposable.dispose();
            }
        }
    }
}