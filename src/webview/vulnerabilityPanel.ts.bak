import * as vscode from 'vscode';
import { VulnerabilityResult } from '../scanner';
import * as fs from 'fs';
import * as path from 'path';
import PDFDocument from 'pdfkit';

export class VulnerabilityPanel {
    private static currentPanel: VulnerabilityPanel | undefined;
    private readonly _panel: vscode.WebviewPanel;
    private _disposables: vscode.Disposable[] = [];

    constructor(private readonly extensionUri: vscode.Uri) {
        this._panel = vscode.window.createWebviewPanel(
            'vulnerabilityReport',
            'Security Scan Results',
            vscode.ViewColumn.Two,
            {
                enableScripts: true,
                retainContextWhenHidden: true,
                localResourceRoots: [
                    vscode.Uri.parse(extensionUri.toString() + '/media')
                ]
            }
        );

        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);
    }

    public static createOrShow(extensionUri: vscode.Uri): VulnerabilityPanel {
        if (VulnerabilityPanel.currentPanel) {
            VulnerabilityPanel.currentPanel._panel.reveal(vscode.ViewColumn.Two);
            return VulnerabilityPanel.currentPanel;
        }

        VulnerabilityPanel.currentPanel = new VulnerabilityPanel(extensionUri);
        return VulnerabilityPanel.currentPanel;
    }

    public async show(vulnerabilities: VulnerabilityResult[], fileName?: string) {
        if (!fileName) {
            return;
        }

        // Split vulnerabilities based on confidence score
        const validatedVulns = vulnerabilities.filter(v => v.confidence >= 0.5);
        const unconfirmedVulns = vulnerabilities.filter(v => v.confidence < 0.5);

        // Generate reports for validated vulnerabilities
        if (validatedVulns.length > 0) {
            await this.generateReports(validatedVulns, fileName, '_validated');
        }

        // Generate reports for unconfirmed vulnerabilities
        if (unconfirmedVulns.length > 0) {
            await this.generateReports(unconfirmedVulns, fileName, '_NotConfirmed');
        }

        // Show vulnerabilities in the webview with sections
        const htmlContent = this.getWebviewContentWithSections(validatedVulns, unconfirmedVulns);
        this._panel.webview.html = htmlContent;
        this._panel.reveal(vscode.ViewColumn.Two);
    }
    
    private getWebviewContentWithSections(validatedVulns: VulnerabilityResult[], unconfirmedVulns: VulnerabilityResult[]): string {
        // Create the validated vulnerabilities section
        let sectionsHtml = '';
        
        if (validatedVulns.length > 0) {
            const validatedHtml = validatedVulns.map(v => this.generateVulnerabilityHtml(v)).join('');
            sectionsHtml += `
                <section class="vulnerability-section validated">
                    <h2>Validated Vulnerabilities (${validatedVulns.length})</h2>
                    <div class="section-description">These vulnerabilities have a higher confidence score (â‰¥50%) and should be addressed first.</div>
                    ${validatedHtml}
                </section>
            `;
        }
        
        // Create the unconfirmed vulnerabilities section
        if (unconfirmedVulns.length > 0) {
            const unconfirmedHtml = unconfirmedVulns.map(v => this.generateVulnerabilityHtml(v)).join('');
            sectionsHtml += `
                <section class="vulnerability-section unconfirmed">
                    <h2>Potential Vulnerabilities (${unconfirmedVulns.length})</h2>
                    <div class="section-description">These potential issues have a lower confidence score (<50%) and may require further verification.</div>
                    ${unconfirmedHtml}
                </section>
            `;
        }
        
        // If no vulnerabilities found
        if (validatedVulns.length === 0 && unconfirmedVulns.length === 0) {
            sectionsHtml = `
                <div class="no-vulnerabilities">
                    <h2>No Vulnerabilities Detected</h2>
                    <p>The scan did not detect any security vulnerabilities in the analyzed code.</p>
                </div>
            `;
        }
        
        return `<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Security Scan Results</title>
                <style>
                    :root {
                        --color-high-severity: #dc3545;
                        --color-medium-severity: #ffc107;
                        --color-low-severity: #28a745;
                        --color-high-severity-bg: rgba(220, 53, 69, 0.1);
                        --color-medium-severity-bg: rgba(255, 193, 7, 0.1);
                        --color-low-severity-bg: rgba(40, 167, 69, 0.1);
                        --color-confidence: #4a9eff;
                        --color-suggestion: #6f42c1;
                        --color-suggestion-bg: rgba(111, 66, 193, 0.1);
                        --color-header-bg: #f8f9fa;
                        --color-text-primary: #343a40;
                        --color-text-secondary: #6c757d;
                        --color-border: #dee2e6;
                        --color-section-validated: rgba(40, 167, 69, 0.05);
                        --color-section-unconfirmed: rgba(255, 193, 7, 0.05);
                    }

                    body {
                        padding: 15px;
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                        color: var(--color-text-primary);
                    }

                    h2 {
                        position: relative;
                        padding-bottom: 10px;
                        margin-bottom: 10px;
                    }
                    
                    .vulnerability-section {
                        margin-bottom: 30px;
                        padding: 20px;
                        border-radius: 8px;
                    }
                    
                    .vulnerability-section.validated {
                        background-color: var(--color-section-validated);
                        border: 1px solid rgba(40, 167, 69, 0.2);
                    }
                    
                    .vulnerability-section.unconfirmed {
                        background-color: var(--color-section-unconfirmed);
                        border: 1px solid rgba(255, 193, 7, 0.2);
                    }
                    
                    .section-description {
                        margin-bottom: 20px;
                        color: var(--color-text-secondary);
                        font-style: italic;
                    }
                    
                    .no-vulnerabilities {
                        padding: 40px;
                        text-align: center;
                        background-color: var(--color-section-validated);
                        border-radius: 8px;
                        border: 1px solid rgba(40, 167, 69, 0.2);
                    }
                    
                    .no-vulnerabilities h2 {
                        color: var(--color-low-severity);
                    }

                    /* Styles for vulnerability display */
                    .vulnerability-item {
                        background-color: var(--vscode-editor-background);
                        padding: 20px;
                        border-radius: 6px;
                        border-left-width: 5px;
                        border-left-style: solid;
                        margin-bottom: 25px;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                        transition: transform 0.2s ease, box-shadow 0.2s ease;
                    }

                    .vulnerability-item:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                    }

                    .vulnerability-item.high {
                        border-left-color: var(--color-high-severity);
                        background-color: var(--color-high-severity-bg);
                    }

                    .vulnerability-item.medium {
                        border-left-color: var(--color-medium-severity);
                        background-color: var(--color-medium-severity-bg);
                    }

                    .vulnerability-item.low {
                        border-left-color: var(--color-low-severity);
                        background-color: var(--color-low-severity-bg);
                    }

                    /* Code snippet styling */
                    .code-snippet {
                        background-color: var(--vscode-editor-background);
                        padding: 15px;
                        border-radius: 6px;
                        overflow-x: auto;
                        margin: 8px 0;
                        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
                        border: 1px solid var(--color-border);
                        line-height: 1.5;
                        max-height: 300px;
                        overflow-y: auto;
                    }

                    /* Title and badge styling */
                    .severity-badge {
                        font-size: 12px;
                        padding: 3px 10px;
                        border-radius: 20px;
                        font-weight: 600;
                        margin-right: 12px;
                        text-transform: uppercase;
                        letter-spacing: 0.5px;
                    }

                    .severity-badge.high {
                        background-color: var(--color-high-severity);
                        color: white;
                    }

                    .severity-badge.medium {
                        background-color: var(--color-medium-severity);
                        color: black;
                    }

                    .severity-badge.low {
                        background-color: var(--color-low-severity);
                        color: white;
                    }

                    .title {
                        font-size: 16px;
                        flex: 1;
                        font-weight: 600;
                    }

                    h3 {
                        display: flex;
                        align-items: center;
                        gap: 12px;
                        margin-top: 0;
                        margin-bottom: 20px;
                        padding-bottom: 10px;
                        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
                    }

                    /* Line number reference styling */
                    .line-ref {
                        font-family: 'Consolas', 'Monaco', monospace;
                        padding: 3px 8px;
                        background-color: var(--vscode-input-background);
                        border-radius: 4px;
                        display: inline-block;
                        font-weight: bold;
                        border: 1px solid var(--color-border);
                    }

                    /* Details grid styling */
                    .details-grid {
                        display: grid;
                        gap: 20px;
                    }

                    .detail-item {
                        padding: 15px;
                        background-color: var(--vscode-input-background);
                        border-radius: 6px;
                        border: 1px solid var(--color-border);
                        transition: box-shadow 0.2s ease;
                    }

                    .detail-item:hover {
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                    }

                    .detail-label {
                        font-size: 13px;
                        text-transform: uppercase;
                        color: var(--color-text-secondary);
                        display: block;
                        margin-bottom: 8px;
                        font-weight: 600;
                        letter-spacing: 0.5px;
                    }

                    .description {
                        line-height: 1.6;
                    }

                    /* Confidence bar styling */
                    .confidence-bar {
                        height: 22px;
                        background-color: rgba(0, 0, 0, 0.1);
                        border-radius: 12px;
                        overflow: hidden;
                        position: relative;
                        border: 1px solid var(--color-border);
                    }

                    .confidence-fill {
                        height: 100%;
                        background: linear-gradient(90deg, var(--color-confidence) 0%, #63b3ed 100%);
                        transition: width 0.5s ease;
                    }

                    .confidence-text {
                        position: absolute;
                        right: 10px;
                        top: 50%;
                        transform: translateY(-50%);
                        font-size: 12px;
                        color: white;
                        font-weight: bold;
                        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
                    }

                    /* Suggestion block styling */
                    .suggestion-block {
                        background-color: var(--color-suggestion-bg);
                        border-left: 4px solid var(--color-suggestion);
                        padding: 15px;
                        border-radius: 0 6px 6px 0;
                    }

                    .suggestion-content {
                        line-height: 1.6;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Security Scan Results</h1>
                    ${sectionsHtml}
                </div>
            </body>
            </html>`;
    }
    
    private generateVulnerabilityHtml(v: VulnerabilityResult): string {
        return `
            <div class="vulnerability-item ${v.severity.toLowerCase()}">
                <h3>
                    <span class="severity-badge ${v.severity.toLowerCase()}">${v.severity} Severity</span>
                    <span class="title">${this.escapeHtml(v.type || '')} Vulnerability: ${this.escapeHtml(v.vulnerableFunction || '')}</span>
                </h3>
                <div class="details-grid">
                    <div class="detail-item">
                        <span class="detail-label">Description</span>
                        <div class="description">${this.escapeHtml(v.description)}</div>
                    </div>

                    <div class="detail-item line-number">
                        <span class="detail-label">Line Number</span>
                        <div class="line-ref">${v.lineNumber}</div>
                    </div>


                    <div class="detail-item">
                        <span class="detail-label">Vulnerable Code Snippet</span>
                        <pre class="code-snippet"><code>${this.escapeHtml(v.codeSnippet || '')}</code></pre>
                    </div>

                    ${v.fullFunctionCode ? `
                    <div class="detail-item">
                        <span class="detail-label">Full Function Code</span>
                        <pre class="code-snippet full-function"><code>${this.escapeHtml(v.fullFunctionCode)}</code></pre>
                    </div>
                    ` : ''}

                    <div class="detail-item">
                        <span class="detail-label">Possible Remediation</span>
                        <div class="suggestion suggestion-block">
                            <div class="suggestion-content">${this.escapeHtml(v.suggestion)}</div>
                        </div>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Confidence Score</span>
                        <div class="confidence-bar">
                            <div class="confidence-fill" style="width: ${v.confidence * 100}%"></div>
                            <span class="confidence-text">${(v.confidence * 100).toFixed(1)}%</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    private getWebviewContent(vulnerabilities: VulnerabilityResult[]): string {
        const vulnerabilitiesHtml = vulnerabilities.map(v => `
            <div class="vulnerability-item ${v.severity.toLowerCase()}">
                <h3>
                    <span class="severity-badge ${v.severity.toLowerCase()}">${v.severity} Severity</span>
                    <span class="title">${this.escapeHtml(v.type || '')} Vulnerability: ${this.escapeHtml(v.vulnerableFunction || '')}</span>
                </h3>
                <div class="details-grid">
                    <div class="detail-item">
                        <span class="detail-label">Description</span>
                        <div class="description">${this.escapeHtml(v.description)}</div>
                    </div>

                    <div class="detail-item line-number">
                        <span class="detail-label">Line Number</span>
                        <div class="line-ref">${v.lineNumber}</div>
                    </div>


                    <div class="detail-item">
                        <span class="detail-label">Vulnerable Code Snippet</span>
                        <pre class="code-snippet"><code>${this.escapeHtml(v.codeSnippet || '')}</code></pre>
                    </div>

                    ${v.fullFunctionCode ? `
                    <div class="detail-item">
                        <span class="detail-label">Full Function Code</span>
                        <pre class="code-snippet full-function"><code>${this.escapeHtml(v.fullFunctionCode)}</code></pre>
                    </div>
                    ` : ''}

                    <div class="detail-item">
                        <span class="detail-label">Possible Remediation</span>
                        <div class="suggestion suggestion-block">
                            <div class="suggestion-content">${this.escapeHtml(v.suggestion)}</div>
                        </div>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Confidence Score</span>
                        <div class="confidence-bar">
                            <div class="confidence-fill" style="width: ${v.confidence * 100}%"></div>
                            <span class="confidence-text">${(v.confidence * 100).toFixed(1)}%</span>
                        </div>
                    </div>
                </div>
            </div>
        `).join('');

        return `<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Security Scan Results</title>
                <style>
                    :root {
                        --color-high-severity: #dc3545;
                        --color-medium-severity: #ffc107;
                        --color-low-severity: #28a745;
                        --color-high-severity-bg: rgba(220, 53, 69, 0.1);
                        --color-medium-severity-bg: rgba(255, 193, 7, 0.1);
                        --color-low-severity-bg: rgba(40, 167, 69, 0.1);
                        --color-confidence: #4a9eff;
                        --color-suggestion: #6f42c1;
                        --color-suggestion-bg: rgba(111, 66, 193, 0.1);
                        --color-header-bg: #f8f9fa;
                        --color-text-primary: #343a40;
                        --color-text-secondary: #6c757d;
                        --color-border: #dee2e6;
                    }

                    body {
                        padding: 15px;
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                        color: var(--color-text-primary);
                    }

                    h2 {
                        position: relative;
                        padding-bottom: 10px;
                        border-bottom: 1px solid var(--color-border);
                        margin-bottom: 20px;
                    }

                    /* Styles for vulnerability display */
                    .vulnerability-item {
                        background-color: var(--vscode-editor-background);
                        padding: 20px;
                        border-radius: 6px;
                        border-left-width: 5px;
                        border-left-style: solid;
                        margin-bottom: 25px;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                        transition: transform 0.2s ease, box-shadow 0.2s ease;
                    }

                    .vulnerability-item:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                    }

                    .vulnerability-item.high {
                        border-left-color: var(--color-high-severity);
                        background-color: var(--color-high-severity-bg);
                    }

                    .vulnerability-item.medium {
                        border-left-color: var(--color-medium-severity);
                        background-color: var(--color-medium-severity-bg);
                    }

                    .vulnerability-item.low {
                        border-left-color: var(--color-low-severity);
                        background-color: var(--color-low-severity-bg);
                    }

                    /* Code snippet styling */
                    .code-snippet {
                        background-color: var(--vscode-editor-background);
                        padding: 15px;
                        border-radius: 6px;
                        overflow-x: auto;
                        margin: 8px 0;
                        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
                        border: 1px solid var(--color-border);
                        line-height: 1.5;
                        max-height: 300px;
                        overflow-y: auto;
                    }

                    /* Title and badge styling */
                    .severity-badge {
                        font-size: 12px;
                        padding: 3px 10px;
                        border-radius: 20px;
                        font-weight: 600;
                        margin-right: 12px;
                        text-transform: uppercase;
                        letter-spacing: 0.5px;
                    }

                    .severity-badge.high {
                        background-color: var(--color-high-severity);
                        color: white;
                    }

                    .severity-badge.medium {
                        background-color: var(--color-medium-severity);
                        color: black;
                    }

                    .severity-badge.low {
                        background-color: var(--color-low-severity);
                        color: white;
                    }

                    .title {
                        font-size: 16px;
                        flex: 1;
                        font-weight: 600;
                    }

                    h3 {
                        display: flex;
                        align-items: center;
                        gap: 12px;
                        margin-top: 0;
                        margin-bottom: 20px;
                        padding-bottom: 10px;
                        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
                    }

                    /* Line number reference styling */
                    .line-ref {
                        font-family: 'Consolas', 'Monaco', monospace;
                        padding: 3px 8px;
                        background-color: var(--vscode-input-background);
                        border-radius: 4px;
                        display: inline-block;
                        font-weight: bold;
                        border: 1px solid var(--color-border);
                    }

                    /* Details grid styling */
                    .details-grid {
                        display: grid;
                        gap: 20px;
                    }

                    .detail-item {
                        padding: 15px;
                        background-color: var(--vscode-input-background);
                        border-radius: 6px;
                        border: 1px solid var(--color-border);
                        transition: box-shadow 0.2s ease;
                    }

                    .detail-item:hover {
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                    }

                    .detail-label {
                        font-size: 13px;
                        text-transform: uppercase;
                        color: var(--color-text-secondary);
                        display: block;
                        margin-bottom: 8px;
                        font-weight: 600;
                        letter-spacing: 0.5px;
                    }

                    .description {
                        line-height: 1.6;
                    }

                    /* Confidence bar styling */
                    .confidence-bar {
                        height: 22px;
                        background-color: rgba(0, 0, 0, 0.1);
                        border-radius: 12px;
                        overflow: hidden;
                        position: relative;
                        border: 1px solid var(--color-border);
                    }

                    .confidence-fill {
                        height: 100%;
                        background: linear-gradient(90deg, var(--color-confidence) 0%, #63b3ed 100%);
                        transition: width 0.5s ease;
                    }

                    .confidence-text {
                        position: absolute;
                        right: 10px;
                        top: 50%;
                        transform: translateY(-50%);
                        font-size: 12px;
                        color: white;
                        font-weight: bold;
                        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
                    }

                    /* Suggestion block styling */
                    .suggestion-block {
                        background-color: var(--color-suggestion-bg);
                        border-left: 4px solid var(--color-suggestion);
                        padding: 15px;
                        border-radius: 0 6px 6px 0;
                    }

                    .suggestion-content {
                        line-height: 1.6;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h2>Security Scan Results</h2>
                    ${vulnerabilitiesHtml}
                </div>
            </body>
            </html>`;
    }

    private escapeHtml(unsafe: string): string {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    private async generateReports(vulnerabilities: VulnerabilityResult[], fileName: string, suffix: string): Promise<void> {
        const basePath = vscode.workspace.rootPath || '';
        const baseName = path.parse(fileName).name;

        // Generate HTML report
        const htmlContent = this.getWebviewContent(vulnerabilities);
        const htmlPath = path.join(basePath, `${baseName}${suffix}.html`);
        fs.writeFileSync(htmlPath, htmlContent);

        // Generate Markdown report
        const markdownContent = this.generateMarkdownReport(vulnerabilities);
        const mdPath = path.join(basePath, `${baseName}${suffix}.md`);
        fs.writeFileSync(mdPath, markdownContent);

        // Generate PDF report
        const pdfPath = path.join(basePath, `${baseName}${suffix}.pdf`);
        await this.generatePDFReport(vulnerabilities, pdfPath);

        vscode.window.showInformationMessage(
            `Reports saved as:\n${path.basename(htmlPath)}\n${path.basename(mdPath)}\n${path.basename(pdfPath)}`
        );
    }

    private async generatePDFReport(vulnerabilities: VulnerabilityResult[], outputPath: string): Promise<void> {
        const doc = new PDFDocument();
        const stream = fs.createWriteStream(outputPath);
        doc.pipe(stream);

        // Divide vulnerabilities into validated and unconfirmed sections
        const validatedVulns = vulnerabilities.filter(v => v.confidence >= 0.5);
        const unconfirmedVulns = vulnerabilities.filter(v => v.confidence < 0.5);

        // Add title and timestamp
        doc.fontSize(24).text('Security Scan Results', { align: 'center' });
        const now = new Date();
        doc.fontSize(10).text(`Scan performed: ${now.toLocaleDateString()} ${now.toLocaleTimeString()}`, { align: 'center' });
        doc.moveDown(2);
        
        // Function to generate vulnerability details
        const addVulnerabilityDetails = (v: VulnerabilityResult) => {
            // Severity header with color
            doc.fontSize(16)
               .fillColor(v.severity === 'High' ? '#dc3545' :
                         v.severity === 'Medium' ? '#ffc107' : '#28a745')
               .text(`${v.severity} Severity Vulnerability`);
            doc.moveDown();

            // Vulnerability details
            doc.fontSize(14)
               .fillColor('#000000')
               .text(v.type || 'Security Vulnerability');
            doc.moveDown();

            if (v.vulnerableFunction) {
                doc.fontSize(12)
                   .text(`Function: ${v.vulnerableFunction}`);
                doc.moveDown();
            }

            // Description
            doc.fontSize(12)
               .text('Description:', { underline: true });
            doc.fontSize(10)
               .text(v.description);
            doc.moveDown();

            // Line number
            if (v.lineNumber) {
                doc.fontSize(12)
                   .text('Location:', { underline: true });
                doc.fontSize(10)
                   .text(`Line ${v.lineNumber}`);
                doc.moveDown();
            }

            // Code snippet
            if (v.codeSnippet) {
                doc.fontSize(12)
                   .text('Vulnerable Code Snippet:', { underline: true });
                doc.font('Courier')
                   .fontSize(9)
                   .text(v.codeSnippet);
                doc.font('Helvetica')
                   .moveDown();
            }
            
            // Full function code
            if (v.fullFunctionCode) {
                doc.fontSize(12)
                   .text('Full Function Code:', { underline: true });
                doc.font('Courier')
                   .fontSize(8)
                   .text(v.fullFunctionCode);
                doc.font('Helvetica')
                   .moveDown();
            }

            // Remediation
            doc.fontSize(12)
               .text('Remediation Steps:', { underline: true });
            doc.fontSize(10)
               .text(v.suggestion);
            doc.moveDown();

            // Confidence score
            doc.fontSize(12)
               .text('Confidence Score:', { underline: true });
            doc.fontSize(10)
               .text(`${(v.confidence * 100).toFixed(1)}%`);
            
            doc.moveDown();
        };
        
        // No vulnerabilities found
        if (vulnerabilities.length === 0) {
            doc.fontSize(16)
               .fillColor('#28a745')
               .text('No Vulnerabilities Detected', { align: 'center' });
            doc.moveDown();
            doc.fontSize(12)
               .fillColor('#000000')
               .text('The scan did not detect any security vulnerabilities in the analyzed code.');
            doc.end();
            await new Promise<void>((resolve) => stream.on('finish', resolve));
            return;
        }
        
        // Add validated vulnerabilities section
        if (validatedVulns.length > 0) {
            doc.fontSize(20)
               .fillColor('#000000')
               .text(`Validated Vulnerabilities (${validatedVulns.length})`, { underline: true });
            doc.fontSize(12)
               .text('These vulnerabilities have a higher confidence score (â‰¥50%) and should be addressed first.');
            doc.moveDown();
            
            validatedVulns.forEach((v, index) => {
                if (index > 0) doc.addPage();
                addVulnerabilityDetails(v);
            });
        }
        
        // Add unconfirmed vulnerabilities section
        if (unconfirmedVulns.length > 0) {
            if (validatedVulns.length > 0) doc.addPage();
            
            doc.fontSize(20)
               .fillColor('#000000')
               .text(`Potential Vulnerabilities (${unconfirmedVulns.length})`, { underline: true });
            doc.fontSize(12)
               .text('These potential issues have a lower confidence score (<50%) and may require further verification.');
            doc.moveDown();
            
            unconfirmedVulns.forEach((v, index) => {
                if (index > 0) doc.addPage();
                addVulnerabilityDetails(v);
            });
        }

        doc.end();
        await new Promise<void>((resolve) => stream.on('finish', resolve));
    }

    private generateMarkdownReport(vulnerabilities: VulnerabilityResult[]): string {
        // Divide vulnerabilities into validated and unconfirmed sections
        const validatedVulns = vulnerabilities.filter(v => v.confidence >= 0.5);
        const unconfirmedVulns = vulnerabilities.filter(v => v.confidence < 0.5);
        
        const generateVulnerabilityMarkdown = (vulns: VulnerabilityResult[]) => {
            return vulns.map(v => `
## ${v.type || 'Security'} Vulnerability
**Severity:** ${v.severity}
**Confidence:** ${(v.confidence * 100).toFixed(1)}%
${v.vulnerableFunction ? `**Function:** \`${v.vulnerableFunction}\`` : ''}
${v.lineNumber ? `**Line:** ${v.lineNumber}` : ''}

### Description
${v.description}

${v.codeSnippet ? `### Vulnerable Code Snippet
\`\`\`
${v.codeSnippet}
\`\`\`
` : ''}

${v.fullFunctionCode ? `### Full Function Code
\`\`\`
${v.fullFunctionCode}
\`\`\`
` : ''}

### Remediation Steps
${v.suggestion}

---`).join('\n');
        };
        
        let report = `# Security Scan Results\n\n`;
        
        // Add timestamp
        const now = new Date();
        report += `Scan performed: ${now.toLocaleDateString()} ${now.toLocaleTimeString()}\n\n`;
        
        // Add validated vulnerabilities
        if (validatedVulns.length > 0) {
            report += `# Validated Vulnerabilities (${validatedVulns.length})\n`;
            report += `*These vulnerabilities have a higher confidence score (â‰¥50%) and should be addressed first.*\n\n`;
            report += generateVulnerabilityMarkdown(validatedVulns);
            report += '\n\n';
        }
        
        // Add unconfirmed vulnerabilities
        if (unconfirmedVulns.length > 0) {
            report += `# Potential Vulnerabilities (${unconfirmedVulns.length})\n`;
            report += `*These potential issues have a lower confidence score (<50%) and may require further verification.*\n\n`;
            report += generateVulnerabilityMarkdown(unconfirmedVulns);
        }
        
        // No vulnerabilities found
        if (vulnerabilities.length === 0) {
            report += `## No Vulnerabilities Detected\n\nThe scan did not detect any security vulnerabilities in the analyzed code.`;
        }
        
        return report;
    }

    private dispose() {
        VulnerabilityPanel.currentPanel = undefined;
        this._panel.dispose();
        while (this._disposables.length) {
            const disposable = this._disposables.pop();
            if (disposable) {
                disposable.dispose();
            }
        }
    }
}